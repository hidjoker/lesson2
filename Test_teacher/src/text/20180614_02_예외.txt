
 + 예외 처리 구문, Exception Handling

  - try-catch 구문

	try {
	  // try 블록
	  // 예외가 발생되는 코드
	  // 예외 발생이 예측되는 코드
	} catch (ArithmeticException e) {
	  // Arithmetic예외 처리 코드
	} catch (NullPointerException e) {
	  // NullPointer예외 처리 코드
	} catch (Exception e) {
	  // 위의 catch를 제외한 나머지 예외 처리 코드
	} finally {
	  // 예외발생해도 실행
	  // 예외발생하지 않아도 실행
		
	  // 자원 해제 코드
	}	
	System.out.println("예외처리구문 밖");



 + 예외 발생시키기

  - throw new 예외클래스();

   ( Exception e = new Exception(); )
   ( throw e; )

   ( throw new NullPointException(); )

  - 특정상황에 개발자가 직접 예외를 발생시킬 때 사용



 + 예외 떠넘기기, 예외처리 미루기
  - throws 예외클래스;

  - 매개변수 뒤, { 앞 사이에 적어서 사용한다

   [접근제한자] [리턴타입] 메소드명(매개변수) [throws 예외클래스]{
   }

  - throws가 적용된 메소드를 호출하려면 반드시 예외를 처리해야한다
   ( 예외처리를 하지 않으면 문법에러가 난다 )



 + 예외 처리 방법

  1. throws 적용하기

  2. try - catch 구문 적용하기



 + 사용자 정의 예외 만들기

  - API로 제공되는 예외클래스 외에 추가적으로 정의하고 싶은
   예외를 만드는 것

  - Exception 클래스를 상속받아 구현한다
